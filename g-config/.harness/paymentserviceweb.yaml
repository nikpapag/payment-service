pipeline:
  name: payment-service
  identifier: paymentserviceweb
  projectIdentifier: DevX_Demo
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: nikpwingssoftware
        repoName: payment-service
        build: <+input>
  stages:
    - stage:
        name: Build
        identifier: Build
        type: CI
        spec:
          cloneCodebase: true
          infrastructure:
            type: KubernetesDirect
            spec:
              connectorRef: nikpgkecluster
              namespace: payment-service-build
              automountServiceAccountToken: true
              nodeSelector: {}
              os: Linux
          execution:
            steps:
              - step:
                  type: RestoreCacheS3
                  name: RestoreCache
                  identifier: RestoreCache
                  spec:
                    connectorRef: nikpaws
                    region: eu-west-2
                    bucket: nikp-maven
                    key: payment-service-ci
                    archiveFormat: Tar
                    resources:
                      limits:
                        memory: 512Mi
                        cpu: "0.5"
                  when:
                    stageStatus: Success
                  failureStrategies: []
              - parallel:
                  - step:
                      type: RunTests
                      name: runTestsWithIntelligence
                      identifier: runTestsWithIntelligence
                      spec:
                        connectorRef: devxgcp
                        image: gcr.io/sales-209522/devx-maven:<+pipeline.variables.mavenversion>-jdk-<+pipeline.variables.javaversion>
                        language: Java
                        buildTool: Maven
                        args: test
                        packages: com.nikp.
                        runOnlySelectedTests: true
                        preCommand: |
                          cd payment-service
                          #ET-SETUP-BEGIN
                          PROJ_DIR=$PWD
                          cd /opt
                          arch=`uname -m`
                          if [ $arch = "x86_64" ]; then
                            wget -qO- https://get.et.harness.io/releases/latest/nix/harness-et-agent.tar.gz | tar -xz
                          elif [ $arch = "aarch64" ]; then
                            wget -qO- https://get.et.harness.io/releases/latest/arm/harness-et-agent.tar.gz | tar -xz
                          fi
                          export ET_COLLECTOR_URL=https://app.harness.io/gratis/et-collector
                          export ET_APPLICATION_NAME=$HARNESS_PIPELINE_ID
                          export ET_ENV_ID=_INTERNAL_ET_CI
                          export ET_DEPLOYMENT_NAME=$HARNESS_BUILD_ID
                          export ET_ACCOUNT_ID=$HARNESS_ACCOUNT_ID
                          export ET_ORG_ID=$HARNESS_ORG_ID
                          export ET_PROJECT_ID=$HARNESS_PROJECT_ID
                          #export ET_SHUTDOWN_GRACETIME=30000
                          export JAVA_TOOL_OPTIONS="-agentpath:/opt/harness/lib/libETAgent.so"
                          cd $PROJ_DIR
                          #ET-SETUP-END
                        reports:
                          type: JUnit
                          spec:
                            paths:
                              - "**/*.xml"
                        envVariables:
                          DRONE_COMMIT_SHA: any
                          DRONE_REMOTE_URL: any
                          DRONE_SOURCE_BRANCH: any
                          DRONE_TARGET_BRANCH: any
                          MAVEN_OPTS: "-Dmaven.repo.local=/harness/maven/repository"
                          CONTAINER_STEP: "3"
                        resources:
                          limits:
                            memory: 6Gi
                            cpu: "6"
                      description: aderasdsad
                      failureStrategies: []
                  - step:
                      type: Plugin
                      name: cleanup
                      identifier: cleanup
                      spec:
                        connectorRef: nikpdockerhub
                        image: nikpap/githubcli:v2
                        privileged: false
                        settings:
                          GITHUB_TOKEN: <+secrets.getValue("githubtoken")>
                          GITHUB_USERNAME: nikpapag
                          GITHUB_EMAIL: nikpap.cs@icloud.com
                        imagePullPolicy: Always
                        resources:
                          limits:
                            memory: 3Gi
                      failureStrategies:
                        - onFailure:
                            errors:
                              - Unknown
                            action:
                              type: Ignore
                      when:
                        stageStatus: Success
                        condition: <+trigger.branch> != "master-2"
              - step:
                  type: Run
                  name: Build
                  identifier: Build
                  spec:
                    connectorRef: nikpdockerhub
                    image: maven:<+pipeline.variables.mavenversion>-jdk-<+pipeline.variables.javaversion>
                    shell: Sh
                    command: |-
                      cd payment-service
                      mvn -Dmaven.test.skip=true clean install -X
                    privileged: false
                    envVariables:
                      MAVEN_OPTS: "-Dmaven.repo.local=/harness/maven/repository"
                    resources:
                      limits:
                        memory: 3Gi
                        cpu: "2"
                  when:
                    stageStatus: Success
                  failureStrategies: []
                  description: This builds payment service even better. And now with style!sad
              - parallel:
                  - step:
                      type: Security
                      name: Fortify
                      identifier: fortify
                      spec:
                        connectorRef: account.Harness_Docker_Connector
                        privileged: true
                        settings:
                          product_name: fortify
                          product_config_name: fortify-default
                          policy_type: manualUpload
                          scan_type: repository
                          repository_project: payment-service
                          repository_branch: <+codebase.branch>
                          customer_artifacts_path: sto_tests/scan_tools/fortify/test_data
                          manual_upload_filename: "001"
                        imagePullPolicy: Always
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Ignore
                      when:
                        stageStatus: Success
                  - step:
                      type: Security
                      name: OWASP
                      identifier: OWASP
                      spec:
                        privileged: true
                        settings:
                          policy_type: orchestratedScan
                          scan_type: repository
                          repository_project: payment-service
                          repository_branch: <+codebase.branch>
                          product_name: owasp
                          product_config_name: owasp 5.x
                          fail_on_severity: HIGH
                        imagePullPolicy: Always
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Ignore
                      when:
                        stageStatus: Success
                        condition: <+pipeline.variables.run_owasp_scan> == true
                  - step:
                      type: Security
                      name: Checkmarx
                      identifier: checkmarx
                      spec:
                        connectorRef: account.Harness_Docker_Connector
                        privileged: true
                        settings:
                          product_name: checkmarx
                          product_config_name: checkmarx
                          policy_type: manualUpload
                          scan_type: repository
                          repository_project: payment-service
                          repository_branch: <+codebase.branch>
                          customer_artifacts_path: sto_tests/scan_tools/checkmarx/test_data
                          manual_upload_filename: "001"
                        imagePullPolicy: Always
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Ignore
                      when:
                        stageStatus: Success
                  - step:
                      type: Security
                      name: Sonar_STO
                      identifier: Sonar_Scan_Vulnerabilities
                      spec:
                        privileged: true
                        settings:
                          policy_type: manualUpload
                          scan_type: repository
                          repository_branch: <+codebase.branch>
                          product_name: sonarqube
                          product_access_token: <+secrets.getValue("productaccesstoken")>
                          product_project_name: payment-service
                          product_project_key: payment-service
                          product_domain: http://sonar.harness-demo.site
                          product_config_name: sonarqube-agent
                          product_lookup_type: byKey
                          repository_project: payment-service
                          customer_artifacts_path: sto_tests/scan_tools/sonarqube/test_data
                          manual_upload_filename: "001"
                        imagePullPolicy: Always
                      when:
                        stageStatus: Success
                  - step:
                      type: Plugin
                      name: sonarqube
                      identifier: sonarqube
                      spec:
                        connectorRef: nikpdockerhub
                        image: nikpap/harness-plugin:sonarqube
                        privileged: true
                        reports:
                          type: JUnit
                          spec:
                            paths:
                              - "**/SonarqubeJunitResults.xml"
                        settings:
                          SONAR_URL: http://35.214.81.102
                          SONAR_PORT: "9000"
                          SONAR_TOKEN: <+secrets.getValue("sonardevxtoken")>
                          SONAR_PROJECT_KEY: devxdemo
                          SONAR_REPORT_NAME: sonarqube-report-name
                        imagePullPolicy: Always
                      when:
                        stageStatus: Success
                      failureStrategies: []
              - step:
                  type: SaveCacheS3
                  name: Savemavenrepo
                  identifier: Savemavenrepo
                  spec:
                    connectorRef: nikpaws
                    region: eu-west-2
                    bucket: nikp-maven
                    key: payment-service-ci
                    sourcePaths:
                      - ./maven/repository
                    archiveFormat: Tar
                    override: true
                    resources:
                      limits:
                        memory: 512Mi
                        cpu: "0.5"
                  when:
                    stageStatus: Success
                  failureStrategies: []
              - step:
                  type: BuildAndPushECR
                  name: pushToECR
                  identifier: pushToECR
                  spec:
                    connectorRef: nikpaws
                    region: eu-west-2
                    account: "759984737373"
                    imageName: payment-service
                    tags:
                      - <+pipeline.sequenceId>
                    dockerfile: /harness/payment-service/Dockerfile
                    optimize: true
                    resources:
                      limits:
                        memory: 1Gi
                        cpu: "1"
                  when:
                    stageStatus: Success
                    condition: <+pipeline.variables.seusername> == 'aws'
                  failureStrategies: []
              - step:
                  type: BuildAndPushDockerRegistry
                  name: pushToDockerHub
                  identifier: pushToDockerHub
                  spec:
                    connectorRef: nikpdockerhub
                    repo: nikpap/payment-service
                    tags:
                      - <+pipeline.sequenceId>
                    dockerfile: /harness/payment-service/Dockerfile
                    optimize: true
                    resources:
                      limits:
                        memory: 4Gi
                        cpu: "4"
                  when:
                    stageStatus: Success
                  failureStrategies: []
              - parallel:
                  - step:
                      type: Security
                      name: Veracode
                      identifier: veracode
                      spec:
                        privileged: true
                        settings:
                          product_name: veracode
                          product_config_name: default
                          policy_type: ingestionOnly
                          scan_type: repository
                          repository_project: payment-service
                          repository_branch: <+codebase.branch>
                          customer_artifacts_path: sto_tests/scan_tools/veracode/test_data
                          manual_upload_filename: "001"
                        imagePullPolicy: Always
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Ignore
                      when:
                        stageStatus: Success
                        condition: <+pipeline.variables.seusername> != "nikpapag"
                  - step:
                      type: Security
                      name: Aqua
                      identifier: Aqua2
                      spec:
                        privileged: true
                        settings:
                          product_name: aqua-trivy
                          product_config_name: aqua-trivy
                          policy_type: manualUpload
                          scan_type: container
                          container_type: local_image
                          container_domain: docker.io
                          container_project: nodegoat
                          container_tag: local
                          fail_on_severity: HIGH
                          customer_artifacts_path: sto_tests/scan_tools/aqua_trivy/test_data
                          manual_upload_filename: "001"
                        imagePullPolicy: Always
                      failureStrategies:
                        - onFailure:
                            errors:
                              - AllErrors
                            action:
                              type: Ignore
                      when:
                        stageStatus: Success
                        condition: <+pipeline.variables.run_owasp_scan> == true
          serviceConfig:
            serviceRef: ""
            serviceDefinition:
              type: Kubernetes
              spec:
                variables: []
          sharedPaths:
            - /var/run
          serviceDependencies:
            - identifier: dind
              name: dind
              type: Service
              spec:
                connectorRef: nikpdockerhub
                image: docker:dind
                privileged: true
                entrypoint:
                  - dockerd-entrypoint.sh
                imagePullPolicy: IfNotPresent
                resources:
                  limits:
                    memory: 500Mi
                    cpu: 300m
        when:
          pipelineStatus: Success
        variables:
          - name: sto_api_key
            type: Secret
            value: STOJWT
          - name: runner_registry_username
            type: Secret
            value: ZN_Docker_Student_Username
          - name: runner_registry_token
            type: Secret
            value: zeronorthpass
          - name: runner_tag
            type: String
            value: dev
          - name: api_domain_name
            type: String
            value: https://api.sto.harness.io
    - stage:
        name: Security Checks
        identifier: Security_Checks
        type: SecurityTests
        spec:
          cloneCodebase: true
          infrastructure:
            useFromStage: Build
          execution:
            steps:
              - parallel:
                  - step:
                      type: Checkmarx
                      name: Checkmarx Quality Gate
                      identifier: Checkmarx_Quality_Gate
                      spec:
                        mode: ingestion
                        config: default
                        target:
                          name: Checkmarx
                          type: repository
                          variant: <+codebase.branch>
                        advanced:
                          log:
                            level: info
                          fail_on_severity: none
                        ingestion:
                          file: sto_tests/scan_tools/checkmarx/test_data/001
                  - step:
                      type: Sonarqube
                      name: Sonarqube Quality Gate
                      identifier: Sonarqube_Quality_Gate
                      spec:
                        mode: ingestion
                        config: default
                        target:
                          name: SonarQube
                          type: repository
                          variant: <+codebase.branch>
                        advanced:
                          log:
                            level: info
                          fail_on_severity: none
                        ingestion:
                          file: sto_tests/scan_tools/sonarqube/test_data/001
              - parallel:
                  - step:
                      type: AquaTrivy
                      name: AquaTrivy Quality Gate
                      identifier: AquaTrivy_Quality_Gate
                      spec:
                        mode: ingestion
                        config: default
                        target:
                          name: AquaTrivy
                          type: container
                          variant: <+codebase.branch>
                        advanced:
                          log:
                            level: info
                          fail_on_severity: none
                        privileged: false
                        ingestion:
                          file: sto_tests/scan_tools/aqua_trivy/test_data/001
                  - step:
                      type: Snyk
                      name: Snyk Quality Gate
                      identifier: Snyk_Quality_Gate
                      spec:
                        mode: ingestion
                        config: default
                        target:
                          name: Snyk
                          type: repository
                          variant: <+codebase.branch>
                        advanced:
                          log:
                            level: info
                          fail_on_severity: none
                        ingestion:
                          file: sto_tests/scan_tools/snyk/test_data/001
        when:
          pipelineStatus: Success
          condition: <+pipeline.variables.runSecurityStage> == "True"
    - stage:
        name: Test Payment Service
        identifier: DeployDev
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: paymentservicesrm_dev
            serviceInputs:
              serviceDefinition:
                type: Kubernetes
                spec:
                  artifacts:
                    primary:
                      primaryArtifactRef: payment-service
          environment:
            environmentRef: GKEDEV
            deployToAll: false
            infrastructureDefinitions:
              - identifier: K8s_Dev_Namespace
          deployToAll: false
          infrastructureDefinitions:
            - identifier: K8s_Prod_Namespace
          execution:
            steps:
              - step:
                  name: Get BMC Ticket Data
                  identifier: Get_BMC_Ticket_Data
                  template:
                    templateRef: BMC_Remedy_Get_Ticket_Data
                    versionLabel: 1.0.0
                    templateInputs:
                      type: ShellScript
                      spec:
                        environmentVariables:
                          - name: TicketID
                            type: String
                            value: <+input>
              - step:
                  name: Persist Ticket Data
                  identifier: Persist_Ticket_Data
                  template:
                    templateRef: ZKB_Persist_Data
                    versionLabel: 1.0.0
              - step:
                  type: JenkinsBuild
                  name: "Jenkins Build "
                  identifier: Jenkins_Build
                  spec:
                    connectorRef: DevX_Jenkins
                    jobName: <+job1>
                    jobParameter: []
                    unstableStatusAsSuccess: false
                    useConnectorUrlForJobExecution: false
                  timeout: 10m
                  failureStrategies:
                    - onFailure:
                        errors:
                          - AllErrors
                        action:
                          type: MarkAsSuccess
              - step:
                  name: Deploy Service on Test
                  identifier: rolloutDeployment
                  type: K8sRollingDeploy
                  timeout: 10m
                  spec:
                    skipDryRun: false
                    pruningEnabled: false
              - parallel:
                  - step:
                      name: Cypress
                      identifier: JMeter
                      template:
                        templateRef: JMeter
                        versionLabel: v1
                  - step:
                      type: ShellScript
                      name: Selenium Test
                      identifier: Selenium_Test
                      spec:
                        shell: Bash
                        onDelegate: true
                        source:
                          type: Inline
                          spec:
                            script: |-
                              selenium_results="# [info] Executing: |View Balance | /paymentservice/viewBalance 
                              # [info] Actual value 'Match with the expected'
                              # [info] Executing: |Perform Transaction | /paymentservice/createTransaction
                              # [info] Actual value 'Successful Transaction'
                              # [info] Executing: |verifyPayment | /paymentservice/verifyPayment
                              # [info] Actual value 'Payment verified'
                              # [info] Executing: |verifyElementPresent | //input[contains(@src,'/ndmns/../images/wap2/img/framework/search_button.png')]
                              # [info] Actual value 'ElementPresent'
                              # [info] Executing: |verifyElementPresent | //img[contains(@src,'ad-banners/banner_ideas_240x40.jpg')] 
                              # [info] Actual value 'ElementPresent'"

                              echo $selenium_results

                              export selenium_output=$selenium_results
                        environmentVariables: []
                        outputVariables:
                          - name: selenium_output
                            type: String
                            value: selenium_output
                      timeout: 10m
              - step:
                  name: Check BMC Ticket Status
                  identifier: Check_BMC_Ticket_Status
                  template:
                    templateRef: BMC_Remedy_Status_Check
                    versionLabel: 1.0.0
                    templateInputs:
                      type: ShellScript
                      spec:
                        environmentVariables:
                          - name: expectedStatus
                            type: String
                            value: OK
                          - name: pollIntervall
                            type: Number
                            value: "10"
                          - name: ticketID
                            type: String
                            value: <+pipeline.stages.DeployDev.spec.execution.steps.Get_BMC_Ticket_Data.spec.environmentVariables.TicketID>
            rollbackSteps:
              - step:
                  name: Rollback Rollout Deployment
                  identifier: rollbackRolloutDeployment
                  type: K8sRollingRollback
                  timeout: 10m
                  spec: {}
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
    - stage:
        name: Approve Prod
        identifier: Jira_Approve
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  type: HarnessApproval
                  name: Approve Production Deployment Phase
                  identifier: Approve_Production_Deployment_Phase
                  spec:
                    approvalMessage: Please review the following information and approve the pipeline progression
                    includePipelineExecutionHistory: true
                    approvers:
                      userGroups:
                        - _project_all_users
                      minimumCount: 1
                      disallowPipelineExecutor: false
                    approverInputs: []
                  timeout: 1d
              - step:
                  name: Update Change Ticket
                  identifier: Update_Change_Ticket
                  template:
                    templateRef: BMC_Remedy_Update_Ticket
                    versionLabel: 1.0.0
                    templateInputs:
                      type: ShellScript
                      spec:
                        environmentVariables:
                          - name: ticketID
                            type: String
                            value: <+pipeline.stages.DeployDev.spec.execution.steps.Get_BMC_Ticket_Data.spec.environmentVariables.TicketID>
                          - name: approver
                            type: String
                            value: <+pipeline.stages.Jira_Approve.spec.execution.steps.Approve_Production_Deployment_Phase.output.approvalActivities[0].user.name>
                          - name: ticketMessage
                            type: String
                            value: Production Deployment approved and test results verified
            rollbackSteps: []
          serviceDependencies: []
        tags: {}
        when:
          pipelineStatus: Success
    - stage:
        name: Production Payment Service
        identifier: DeployProd
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: <+input>
            serviceInputs: <+input>
          environment:
            environmentRef: GKEPROD
            deployToAll: false
            infrastructureDefinitions:
              - identifier: K8s_Prod_Namespace
          deployToAll: false
          infrastructureDefinitions:
            - identifier: K8s_Prod_Namespace
          execution:
            steps:
              - stepGroup:
                  name: Canary Deployment
                  identifier: canaryDepoyment
                  steps:
                    - step:
                        name: Canary Deployment
                        identifier: canaryDeployment
                        type: K8sCanaryDeploy
                        timeout: 10m
                        spec:
                          instanceSelection:
                            type: Count
                            spec:
                              count: 1
                          skipDryRun: false
                    - step:
                        type: Http
                        name: Smoke Test
                        identifier: Smoke_Test
                        spec:
                          url: http://<+pipeline.variables.seusername>.cie-demo.co.uk/
                          method: GET
                          headers: []
                          outputVariables: []
                        timeout: 10s
                        failureStrategies:
                          - onFailure:
                              errors:
                                - AllErrors
                              action:
                                type: ManualIntervention
                                spec:
                                  timeout: 1h
                                  onTimeout:
                                    action:
                                      type: Abort
                    - step:
                        type: Verify
                        name: verify_canary
                        identifier: verify_dev
                        spec:
                          type: Canary
                          spec:
                            sensitivity: LOW
                            duration: 5m
                            deploymentTag: <+serviceConfig.artifacts.primary.tag>
                          monitoredService:
                            type: Default
                            spec: {}
                        timeout: 1d
                        failureStrategies:
                          - onFailure:
                              errors:
                                - Verification
                              action:
                                type: ManualIntervention
                                spec:
                                  timeout: 2h
                                  onTimeout:
                                    action:
                                      type: StageRollback
                          - onFailure:
                              errors:
                                - Unknown
                              action:
                                type: ManualIntervention
                                spec:
                                  timeout: 2h
                                  onTimeout:
                                    action:
                                      type: Ignore
                        when:
                          stageStatus: Success
                          condition: <+pipeline.variables.verify_fail> == "false"
                    - step:
                        name: Canary Delete
                        identifier: canaryDelete
                        type: K8sCanaryDelete
                        timeout: 10m
                        spec: {}
                    - step:
                        name: Update Ticket Canary done
                        identifier: Update_Ticket_Canary_done
                        template:
                          templateRef: BMC_Remedy_Update_Ticket
                          versionLabel: 1.0.0
                          templateInputs:
                            type: ShellScript
                            spec:
                              environmentVariables:
                                - name: ticketID
                                  type: String
                                  value: <+pipeline.stages.DeployDev.spec.execution.steps.Get_BMC_Ticket_Data.spec.environmentVariables.TicketID>
                                - name: approver
                                  type: String
                                  value: <+pipeline.stages.Jira_Approve.spec.execution.steps.Approve_Production_Deployment_Phase.output.approvalActivities[0].user.name>
                                - name: ticketMessage
                                  type: String
                                  value: Production Canary Deployment successfull. Now rolling out to entire environment.
                  rollbackSteps:
                    - step:
                        name: Canary Delete
                        identifier: canaryDelete
                        type: K8sCanaryDelete
                        timeout: 10m
                        spec: {}
              - stepGroup:
                  name: Primary Deployment
                  identifier: primaryDepoyment
                  steps:
                    - step:
                        name: Rolling Deployment
                        identifier: rollingDeployment
                        type: K8sRollingDeploy
                        timeout: 10m
                        spec:
                          skipDryRun: false
                  rollbackSteps:
                    - step:
                        name: Rolling Rollback
                        identifier: rollingRollback
                        type: K8sRollingRollback
                        timeout: 10m
                        spec: {}
              - parallel:
                  - step:
                      name: Update Ticket - Prod Deployment Done
                      identifier: Update_Ticket_Prod_Deployment_Done
                      template:
                        templateRef: BMC_Remedy_Update_Ticket
                        versionLabel: 1.0.0
                        templateInputs:
                          type: ShellScript
                          spec:
                            environmentVariables:
                              - name: ticketID
                                type: String
                                value: <+pipeline.stages.DeployDev.spec.execution.steps.Get_BMC_Ticket_Data.spec.environmentVariables.TicketID>
                              - name: approver
                                type: String
                                value: <+pipeline.stages.Jira_Approve.spec.execution.steps.Approve_Production_Deployment_Phase.output.approvalActivities[0].user.name>
                              - name: ticketMessage
                                type: String
                                value: Production Environment updated
                  - step:
                      type: Email
                      name: Notify
                      identifier: Notify_Julian
                      spec:
                        to: <+pipeline.stages.Jira_Approve.spec.execution.steps.Approve_Production_Deployment_Phase.output.approvalActivities[0].user.email>, <+pipeline.triggeredBy.name>
                        cc: ""
                        body: "Hi Julian, <br> <+service.name> went into <+env.name>. Here are the details. <br> <ul> <li>Release Name: <+pipeline.stages.DeployProd.spec.execution.steps.primaryDepoyment.steps.rollingDeployment.output.releaseName></li> <li>Release Number: <+pipeline.stages.DeployProd.spec.execution.steps.primaryDepoyment.steps.rollingDeployment.output.releaseNumber></li> <li>CommitID: <+pipeline.stages.DeployProd.spec.execution.steps.primaryDepoyment.steps.rollingDeployment.output.manifest.manifest.commitId></li> <li>Namespace: <+pipeline.stages.DeployProd.spec.execution.steps.primaryDepoyment.steps.rollingDeployment.deploymentInfoOutcome.serverInstanceInfoList[0].namespace></li> <li>Image: <+pipeline.stages.DeployProd.spec.execution.steps.primaryDepoyment.steps.rollingDeployment.deploymentInfoOutcome.serverInstanceInfoList[0].containerList[0].image></li> </ul> <br> Best, <br> Julian"
                        subject: <+service.name> is deployed on <+env.name>
                      timeout: 10m
              - step:
                  type: ShellScript
                  name: WrapUp
                  identifier: WrapUp
                  spec:
                    shell: Bash
                    onDelegate: true
                    source:
                      type: Inline
                      spec:
                        script: |-
                          echo "Wrapping up deployment"
                          url="http://$subdomain.cie-demo.co.uk"
                          export application="$url"
                    environmentVariables:
                      - name: subdomain
                        type: String
                        value: <+pipeline.variables.seusername>
                    outputVariables:
                      - name: application
                        type: String
                        value: application
                    executionTarget: {}
                  timeout: 10m
              - step:
                  type: K8sApply
                  name: Autostopping
                  identifier: Autostopping
                  spec:
                    filePaths:
                      - autostopping/ccm-autostoppingrule.yaml
                    skipDryRun: false
                    skipSteadyStateCheck: false
                  timeout: 10m
                  when:
                    stageStatus: Success
                    condition: <+pipeline.variables.autostopping> == "true"
                  failureStrategies: []
            rollbackSteps:
              - step:
                  type: K8sCanaryDelete
                  name: Canary Rollback
                  identifier: Canary_Rollback
                  spec:
                    skipDryRun: false
                  timeout: 10m
          serviceDependencies: []
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback
        when:
          pipelineStatus: Success
    - stage:
        name: CAB Meeting
        identifier: CAB_Meeting
        description: ""
        type: Approval
        spec:
          execution:
            steps:
              - step:
                  name: CAB Meeting
                  identifier: CAB_Meeting
                  type: HarnessApproval
                  timeout: 1d
                  spec:
                    includePipelineExecutionHistory: true
                    approvers:
                      minimumCount: 1
                      disallowPipelineExecutor: false
                      userGroups:
                        - jkharnessio
                    approverInputs: []
                    approvalMessage: "Review and Approve final Release of Payment Service - Features in Scope: <+pipeline.stages.Enable_Test_Features.execution.steps.FlagConfiguration_1.spec.feature> and Service is running here url=http://<+pipeline.variables.seusername>.cie-demo.co.uk"
        tags: {}
        when:
          pipelineStatus: Success
          condition: <+pipeline.variables.CABRequired> == "True"
    - stage:
        name: Progressive Release
        identifier: Release_Features
        description: ""
        type: FeatureFlag
        spec:
          execution:
            steps:
              - step:
                  type: FlagConfiguration
                  name: Ten Percent Release
                  identifier: Ten_Percent_Release
                  spec:
                    feature: mortgageoffer
                    environment: GKEPROD
                    instructions:
                      - identifier: AddRuleIdentifier
                        type: AddRule
                        spec:
                          priority: 100
                          distribution:
                            bucketBy: identifier
                            clauses:
                              - op: segmentMatch
                                attribute: ""
                                values:
                                  - Customer_Group_A
                            variations:
                              - variation: "true"
                                weight: 10
                              - variation: "false"
                                weight: 90
                  timeout: 10m
              - step:
                  type: HarnessApproval
                  name: Release Gate
                  identifier: Release_Gate
                  spec:
                    approvalMessage: Please review the following information and approve the pipeline progression
                    includePipelineExecutionHistory: true
                    approvers:
                      userGroups:
                        - jkharnessio
                      minimumCount: 1
                      disallowPipelineExecutor: false
                    approverInputs: []
                  timeout: 1d
              - step:
                  type: FlagConfiguration
                  name: Twenty Percent Release
                  identifier: Twenty_Percent_Release
                  spec:
                    feature: mortgageoffer
                    environment: GKEPROD
                    instructions:
                      - identifier: AddRuleIdentifier
                        type: AddRule
                        spec:
                          priority: 100
                          distribution:
                            bucketBy: identifier
                            clauses:
                              - op: segmentMatch
                                attribute: ""
                                values:
                                  - Customer_Group_A
                            variations:
                              - variation: "true"
                                weight: 20
                              - variation: "false"
                                weight: 80
                  timeout: 10m
              - step:
                  type: FlagConfiguration
                  name: Fifty Percent Release
                  identifier: Fifty_Percent_Release
                  spec:
                    feature: mortgageoffer
                    environment: GKEPROD
                    instructions:
                      - identifier: AddRuleIdentifier
                        type: AddRule
                        spec:
                          priority: 100
                          distribution:
                            bucketBy: identifier
                            clauses:
                              - op: segmentMatch
                                attribute: ""
                                values:
                                  - Customer_Group_A
                            variations:
                              - variation: "true"
                                weight: 50
                              - variation: "false"
                                weight: 50
                  timeout: 10m
              - step:
                  type: HarnessApproval
                  name: Final Release Gate
                  identifier: Final_Release_Gate
                  spec:
                    approvalMessage: Please review the following information and approve the pipeline progression
                    includePipelineExecutionHistory: true
                    approvers:
                      userGroups:
                        - jkharnessio
                      minimumCount: 1
                      disallowPipelineExecutor: false
                    approverInputs: []
                  timeout: 1d
              - step:
                  type: FlagConfiguration
                  name: Full Release
                  identifier: Full_Release
                  spec:
                    feature: mortgageoffer
                    environment: GKEPROD
                    instructions:
                      - identifier: AddRuleIdentifier
                        type: AddRule
                        spec:
                          priority: 100
                          distribution:
                            bucketBy: identifier
                            clauses:
                              - op: segmentMatch
                                attribute: ""
                                values:
                                  - Customer_Group_A
                            variations:
                              - variation: "true"
                                weight: 100
                              - variation: "false"
                                weight: 0
                  timeout: 10m
              - step:
                  type: HarnessApproval
                  name: Rollback Environment
                  identifier: Rollback_Environment
                  spec:
                    approvalMessage: Please review the following information and approve the pipeline progression
                    includePipelineExecutionHistory: true
                    approvers:
                      userGroups:
                        - jkharnessio
                      minimumCount: 1
                      disallowPipelineExecutor: false
                    approverInputs: []
                  timeout: 1d
              - step:
                  type: FlagConfiguration
                  name: Disable Flag
                  identifier: Disable_Flag
                  spec:
                    feature: mortgageoffer
                    environment: GKEPROD
                    instructions:
                      - identifier: AddRuleIdentifier
                        type: AddRule
                        spec:
                          priority: 100
                          distribution:
                            bucketBy: identifier
                            clauses:
                              - op: segmentMatch
                                attribute: ""
                                values:
                                  - Customer_Group_A
                            variations:
                              - variation: "true"
                                weight: 0
                              - variation: "false"
                                weight: 100
                  timeout: 10m
          service:
            serviceRef: ""
  variables:
    - name: mavenversion
      type: String
      default: "3.8"
      value: <+input>
    - name: javaversion
      type: String
      default: "8"
      value: <+input>
    - name: servicename
      type: String
      default: payment-service
      value: payment-service
    - name: seusername
      type: String
      value: <+input>
    - name: ffsdkkeyprod
      type: String
      default: 44c9dcaa-dab2-4100-b2b5-75bdeb7aa497
      value: <+secrets.getValue("ffsdkprod")>
    - name: isingress
      type: Number
      default: 1
      value: 1
    - name: verify_fail
      type: String
      default: "false"
      value: <+input>.allowedValues(true,false)
    - name: run_owasp_scan
      type: String
      default: "false"
      value: <+input>.allowedValues(true,false)
    - name: dbuser
      type: Secret
      value: dbuser
    - name: dbpassword
      type: Secret
      value: dbpassword
    - name: verify_fail2
      type: String
      value: test
    - name: autostopping
      type: String
      default: "false"
      value: <+input>.allowedValues(true,false)
    - name: runSecurityStage
      type: String
      default: "False"
      description: ""
      value: <+input>
    - name: CABRequired
      type: String
      default: "False"
      description: ""
      value: <+input>.allowedValues(True,False)
  flowControl:
    barriers:
      - name: Barrier
        identifier: Barrier
      - name: Test Barrier
        identifier: Test_Barrier
      - name: Enable Flags
        identifier: Enable_Flags
      - name: Test finished
        identifier: Test_finished
  allowStageExecutions: true
